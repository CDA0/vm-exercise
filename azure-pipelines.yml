pool:
  vmImage: ubuntu-20.04

variables:
- group: spcreds

stages:
- stage: Infra
  jobs:
  - job: Deploy_Infra
    steps:
    - script: npm i
      displayName: NPM Install
    - script: npm run deploy
      displayName: Deploy
      env:
        ARM_CLIENT_ID: $(clientId)
        ARM_CLIENT_SECRET: $(clientSecret)
        ARM_SUBSCRIPTION_ID: $(subscriptionId)
        ARM_TENANT_ID: $(tenantId)
    - script: kubectl create namespace ingress-basic --kubeconfig kubeconfig | true
      displayName: Create Namespace
    - script: helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      displayName: Add helm repo
    - script: |
        helm upgrade --install nginx-ingress ingress-nginx/ingress-nginx \
          --namespace ingress-basic \
          --set controller.replicaCount=1 \
          --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
          --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux \
          --set controller.admissionWebhooks.patch.nodeSelector."beta\.kubernetes\.io/os"=linux \
          --kubeconfig kubeconfig
      displayName: Install Ingress
    - script: |
        kubectl create secret docker-registry myregistrykey \
          --docker-server=acr0containerexample.azurecr.io \
          --docker-username=$(clientId) \
          --docker-password=$(clientSecret) \
          --docker-email=noten@email.com -n ingress-basic | true
      displayName: Set imagepullsecret
    - publish: $(System.DefaultWorkingDirectory)/kubeconfig
      artifact: kubeconfig

- stage: Weather_Application
  jobs:
  - job: Test_And_Build
    steps:
    - script: npm i
      displayName: NPM Install
    - script: cd node-app && npm i && npm test
      displayName: NPM Test
    - script: npm run lint
      displayName: Lint
    - script: buildah bud -t localhost/weatherapp:0.0.1 -f node-app/Containerfile node-app
      displayName: Build Container
    - script: |
        skopeo copy \
        containers-storage:localhost/weatherapp:0.0.1 \
        docker://acr0containerexample.azurecr.io/weatherapp \
        --dest-creds $(clientId):$(clientSecret)
      displayName: Push Image

- stage: Deploy_Weather_App
  jobs:
  - job: Deploy
    steps:
    - download: current
      artifact: kubeconfig
    - script: cd helm && helm template . > deploy.yaml
      displayName: Helm template
    - script: kubectl apply -f helm/deploy.yaml --kubeconfig $(Pipeline.Workspace)/kubeconfig/kubeconfig
      displayName: Deploy
    - script: kubectl get services -n ingress-basic --kubeconfig $(Pipeline.Workspace)/kubeconfig/kubeconfig
      displayName: Get Services
